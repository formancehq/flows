// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"openapi/internal/utils"
	"time"
)

type StageStatus struct {
	Stage        float64    `json:"stage"`
	InstanceID   string     `json:"instanceID"`
	StartedAt    time.Time  `json:"startedAt"`
	TerminatedAt *time.Time `json:"terminatedAt,omitempty"`
	Error        *string    `json:"error,omitempty"`
}

func (s StageStatus) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StageStatus) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *StageStatus) GetStage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Stage
}

func (o *StageStatus) GetInstanceID() string {
	if o == nil {
		return ""
	}
	return o.InstanceID
}

func (o *StageStatus) GetStartedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartedAt
}

func (o *StageStatus) GetTerminatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.TerminatedAt
}

func (o *StageStatus) GetError() *string {
	if o == nil {
		return nil
	}
	return o.Error
}
