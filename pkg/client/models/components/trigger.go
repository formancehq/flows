// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"openapi/internal/utils"
	"time"
)

type Trigger struct {
	Event      string         `json:"event"`
	WorkflowID string         `json:"workflowID"`
	Filter     *string        `json:"filter,omitempty"`
	Vars       map[string]any `json:"vars,omitempty"`
	Name       *string        `json:"name,omitempty"`
	ID         string         `json:"id"`
	CreatedAt  time.Time      `json:"createdAt"`
}

func (t Trigger) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Trigger) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Trigger) GetEvent() string {
	if o == nil {
		return ""
	}
	return o.Event
}

func (o *Trigger) GetWorkflowID() string {
	if o == nil {
		return ""
	}
	return o.WorkflowID
}

func (o *Trigger) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *Trigger) GetVars() map[string]any {
	if o == nil {
		return nil
	}
	return o.Vars
}

func (o *Trigger) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Trigger) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Trigger) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}
