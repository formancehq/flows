// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"openapi/internal/utils"
	"time"
)

type V2TriggerOccurrence struct {
	Date               time.Time           `json:"date"`
	WorkflowInstanceID *string             `json:"workflowInstanceID,omitempty"`
	WorkflowInstance   *V2WorkflowInstance `json:"workflowInstance,omitempty"`
	TriggerID          string              `json:"triggerID"`
	Error              *string             `json:"error,omitempty"`
	Event              map[string]any      `json:"event"`
}

func (v V2TriggerOccurrence) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2TriggerOccurrence) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *V2TriggerOccurrence) GetDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Date
}

func (o *V2TriggerOccurrence) GetWorkflowInstanceID() *string {
	if o == nil {
		return nil
	}
	return o.WorkflowInstanceID
}

func (o *V2TriggerOccurrence) GetWorkflowInstance() *V2WorkflowInstance {
	if o == nil {
		return nil
	}
	return o.WorkflowInstance
}

func (o *V2TriggerOccurrence) GetTriggerID() string {
	if o == nil {
		return ""
	}
	return o.TriggerID
}

func (o *V2TriggerOccurrence) GetError() *string {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *V2TriggerOccurrence) GetEvent() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Event
}
